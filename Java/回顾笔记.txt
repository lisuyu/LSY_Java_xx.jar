Colloction

ArrayList

泛型




异常处理

将每种异常处理，提示

使用if else结构，嵌套太多，不方便

所有面向对象语言，使用try...catch处理异常


try{
	打开
	分配内存
	编写文件
	存储文件
}catch(打开文件异常){
	
}catch(分配内存异常){
	
}catch(编写文件异常){
	
}

java中所有的异常都是类，都继承自Exception

    public static int divide(int x,int y){
        int result = 0;
        try {
            System.out.println("before divide!");
            result = x/y;
            System.out.println("after divide!");
        } catch (ArithmeticException  e) {
            System.out.println("divide error");
        }
        System.out.println("end exception!");
        return result;
    }

    //异常被捕获之后的代码不会执行

    异常都是对象

    打印相应异常的错误信息，message时exception的一个属性

    	e.getMessage()

    打印异常发生的轨迹

    	e.printStachTrance()

    异常的产生
    	异常全部都是类，它是通过throw 关键字抛出的

    	throw new ArithmeticException();


        public static int divide(int x,int y){
        //new ArithmeticException() 创建异常对象 并且打印抛出异常的轨迹
        throw new ArithmeticException("抛出异常");
    	}

    	Exception in thread "main" java.lang.ArithmeticException: 抛出异常
			at app.test.error.TestDivide.divide(TestDivide.java:11)
			at app.test.error.TestDivide.main(TestDivide.java:5)

		从上往下一层层抛出
	    
	    public static void main(String[] args) {
	        /*
	        此处将会捕获异常，但没有处理，会自动向上throw
	        * */

	        int c = 0;
	        try {
	            c = divide(10,0);
	        } catch (Exception e) {
	            e.printStackTrace();
	            System.out.println(e.getMessage());
	        }
	        System.out.println(c);
	    }

        当异常被处理之后，代码才会继续向下执行


        接口：
        Throwable

	        Exception implements Throwable

	        	RuntimeException extends Exception 【运行时刻异常，JVM会自动处理，当发现异常时如果没有处理机会自动抛出】

	        		ArithmeticException extends RuntimeException

        		IOException extends Exception  【很多非运行时刻异常，对于非运行时刻异常需要程序员手动处理，如果不处理，直接编译报错】

	        Error implements Throwable

创建异常
	
	public class ClothException extends Exception{

	}

	写一个方法继承Exception，并覆盖其中方法

	两种方式处理异常

	try catch

	声明为抛出 throws

	public class ClothException extends Exception {

    public ClothException() {
    }

    public ClothException(String message) {
        super(message);
    }

    public ClothException(String message, Throwable cause) {
        super(message, cause);
    }

    public ClothException(Throwable cause) {
        super(cause);
    }

    public ClothException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
	}


异常多态的处理

	异常可以嵌套，一次try，多次catch

	可以一次性捕获Exception

	catch从上到下捕获

	捕获和抛出异常都支持多态，如果先捕获了父类异常，则不会捕获子类异常

	抛出异常可以使用多态来操作

	不支持使用父类一次性将所有异常捕获，因为程序中可能会通过捕获不同异常来进行操作

	finally关键字


IDEA快捷键：

Alt+Insert  Generate  快速生成：toString（），构造函数，重写父类方法

Shift+Ctrl+F10  快速执行Application程序

Ctrl+Alt+t   快速导入相关结构体，如try catch，for，if else
         
